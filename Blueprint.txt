Blueprint: SQL Analysis Concepts in Task-4.sql

This document breaks down the SQL concepts you used to complete your data analysis task.

Objective: To profile, audit, and explore the pv_db database using SQL.

Tools Used:

SQL (Structured Query Language): The language used to communicate with the database.

Database Client: A tool (like MySQL Workbench, DBever, or a command line) where you execute these SQL queries.

Core SQL Concepts You Used

Here is a breakdown of the "what" and "why" for the SQL commands in your script.

1. Aggregate Functions (The "What")

These functions perform a calculation on a set of rows and return a single value.

COUNT(column_or_*)

Concept: A counter. COUNT(*) counts all rows in the table/group. COUNT(column_name) counts all rows where column_name is NOT NULL (not missing).

Your Use: You masterfully used COUNT(*) for total counts and COUNT(column) vs. COUNT(*) to perform data quality checks and find missing values.

SUM(column)

Concept: An adder. It sums up all numeric values in that column for the table/group.

Your Use: To find the total combined Age_years or Weight_kg.

AVG(column)

Concept: A calculator. It finds the "average" (mean) of all numeric values in that column.

Your Use: To find the Average_Age or Average_Weight of patients.

MIN(column) / MAX(column)

Concept: Range finders. They find the smallest (MIN) and largest (MAX) value in a column.

Your Use: To find the Youngest_Patient (min age) and Oldest_Patient (max age), or the Earliest_Report (min date).

2. Data Filtering (The "How" and "When")

You used two different types of filters, which is a critical skill.

WHERE Clause

Concept: Filters individual rows before any grouping or aggregation happens. Think of it as the first step of filtering.

Your Use: WHERE Gender = 'Male' or WHERE Age_years IS NOT NULL. This removes rows you don't want before calculating the AVG, COUNT, etc.

HAVING Clause

Concept: Filters entire groups after the GROUP BY and aggregate functions are calculated.

Your Use: HAVING COUNT(*) > 1 or HAVING AVG(WEIGHT_KG) > 70. You can't use WHERE AVG(WEIGHT_KG) > 70 because the AVG hasn't been calculated yet. HAVING lets you filter on the result of an aggregation.

3. Data Grouping & Segmentation

GROUP BY column_name

Concept: This is the core of summarization. It takes all the rows and puts them into "buckets" based on the column values (e.g., a "Male" bucket and a "Female" bucket).

Your Use: GROUP BY Gender. After this, your aggregate functions (COUNT, AVG, etc.) are applied to each "bucket" individually, not the whole table.

4. Output Formatting & Readability

AS alias_name

Concept: An alias, or a nickname. It renames the column in the output to be more readable.

Your Use: COUNT(*) AS TOTAL_PATIENTS is much clearer in the results than a column just named COUNT(*).

ROUND(number, decimals)

Concept: A formatting function that rounds a number to a specified decimal place.

Your Use: ROUND(AVG(Age_years), 2) makes the result clean (e.g., 34.57) instead of messy (34.56789123)
